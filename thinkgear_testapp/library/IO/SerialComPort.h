/*
 * @(#)SerialComPort.h    1.0    Jul 03, 2007
 *
 * Copyright (c) 2007 NeuroSky, Inc. All Rights Reserved
 * NEUROSKY PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/* Ensure this header is only included once */
#ifndef SERIALCOMPORT_H_
#define SERIALCOMPORT_H_

/**
 * @file SerialComPort.h
 *
 * A portable interface for opening, reading from, and writing to
 * a serial COM port.
 *
 * SERIALCOM_newSerialComPort()
 * SERIALCOM_openPort()
 * SERIALCOM_read()
 * SERIALCOM_write()
 * SERIALCOM_destroySerialComPort()
 * SERIALCOM_freeSerialComPort()
 *
 * @author Kelvin Soo
 * @version 1.0 Jul 03, 2007 Kelvin Soo
 *   - Initial version.
 */

/* Include all external libraries required by this header */
#include <assert.h>
#include <stdio.h>

#if defined(_WIN32)
#include <windows.h>
//#include <strsafe.h>
#endif /* _WIN32 */

/* Disable name-mangling when compiling as C++ */
#if defined(__cplusplus)
extern "C" {
#endif

/* Baud rates for the SERIALCOM_setBaudRate() function */
#define BAUDRATE_KEEP_EXISTING      0
#define BAUDRATE_1200            1200
#define BAUDRATE_2400            2400
#define BAUDRATE_4800            4800
#define BAUDRATE_9600            9600
#define BAUDRATE_57600          57600
#define BAUDRATE_115200        115200

/**
 * The SerialComPort object and members.
 *
 * @member readLog - After calling SERIALCOM_openPort(), initialize this
 *                   to a valid FILE pointer to enable writing log
 *                   entries generated by the SerialComPort object.
 *                   Leave as NULL to disable log entries.
 * @member portName - The string name of the port.
 * @member handle (Win32 only) - The Win32 handle of the SerialComPort.
 *                               Initialized by SERIALCOM_openPort(), if
 *                               applicable.
 */
typedef struct _SerialComPort {

    FILE *readLog;
    char *portName;
    int   baudrate;

#ifdef _WIN32
    HANDLE handle;
#else
	int handle;
#endif /* _WIN32 */

} SerialComPort;

/**
 * Allocate memory for a new SerialComPort object.
 *
 * @return A pointer to a newly-allocated SerialComPort object.
 */
#define \
SERIALCOM_newSerialComPort() \
    (SerialComPort *)calloc( 1, sizeof(SerialComPort) )

/**
 * Converts @c portNumber to a port name string, returned in @c portNameBuffer.
 * Allocating about 15 characters worth of space for @c portNameBuffer
 * should typically be sufficient.  The port name string will be formatted
 * based on the operating system that the SERIALCOM library was compiled
 * for.
 *
 * @param portNumber         The serial COM port number to convert.
 * @param portNameBuffer     A string (character buffer) which should be
 *                           allocated to be at least @c portNameBufferSize
 *                           characters long.  When this function returns,
 *                           this buffer contains the port name as a NULL-
 *                           terminated string.
 * @param portNameBufferSize The (minimum) number of characters that
 *                           @c portNameBuffer can hold (including
 *                           terminating NULL).
 *
 * @return The return value is the same as for snprintf().  The GNU
 *         description is: The return value is the number of characters
 *         which would be generated for the given input, excluding the
 *         trailing null. If this value is greater or equal to
 *         @c portNameBufferSize, not all characters from the result have
 *         been stored in s. You should try again with a bigger
 *         @c portNameBuffer.
 */
int
SERIALCOM_portNumberToName( int portNumber, char *portNameBuffer,
                            int portNameBufferSize );

/**
 * Configures @c serialComPort to read/write from the system serial COM
 * port named @c name.  Currently, always opens with configuration of
 * 9600 baud, 8 bits per byte, one stop bit, no parity bit, and no hardware
 * checking.
 *
 * Make sure @c serialComPort is not already open before calling this
 * function, otherwise a memory leak will occur.
 *
 * @param serialComPort A SerialComPort object.
 * @param name          The name of the serial COM port to try to open.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if @c name is NULL.
 * @return -3 if @c name does not open as a serial COM port.
 * @return -4 if an error occurs opening the port.
 * @return -5 if an error occurs configuring the settings for the port.
 * @return -6 if an error occurs configuring the timeouts for the port.
 * @return 0 on success.
 */
int
SERIALCOM_openPort( SerialComPort *serialComPort, const char *name );

/**
 * This function is almost identical to SERIALCOM_openPort(), except that
 * a port number is specified instead of a port name, and some of the return
 * values are slightly different.  A port name will be derived from the port
 * number using SERIALCOM_portNumberToName().
 *
 * @param serialComPort A SerialComPort object which will hold the opened
 *                      port's connection state.
 * @param portNumber    The number of the serial COM port to try to open.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if an error occurs converting @c portNumber to a port name.
 * @return -3 if @c portNumber does not open as a serial COM port.
 * @return -4 if an error occurs opening the port.
 * @return -5 if an error occurs configuring the settings for the port.
 * @return -6 if an error occurs configuring the timeouts for the port.
 * @return 0 on success.
 */
int
SERIALCOM_openPortNumber( SerialComPort *serialComPort, int portNumber );

/**
 * Calls SERIALCOM_openPortNumber() on port numbers from @c startingPortNumber
 * to @c SERIALCOM_endingPortNumber().
 *
 * @param serialComPort      A SerialComPort object which will hold the opened
 *                           port's connection state.
 * @param startingPortNumber The first port number to check.  If a negative
 *                           number is specified, then 0 is assumed.
 * @param endingPortNumber   The last port number to check.  If a negative
 *                           number is specified, then 99 is assumed.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if an abnormal exception occurred.
 * @return -3 if one of the scanned port numbers is abnormally invalid.
 * @return -4 if an abnormal error occurs while attempting to open a port.
 * @return -5 if an abnormal error occurs configuring the settings of the port.
 * @return -6 if an abnormal error occurs configuring the timeouts of the port.
 * @return -7 if none of the ports from @c startingPortNumber to
 *         @c endingPortNumber could be opened as a serial COM port.
 * @return The actual port number that was successfully opened.  Use
 *         SERIALCOM_portNumberToName() if you need to determine the
 *         actual port name string that was opened.
 */
int
SERIALCOM_scanAndOpen( SerialComPort *serialComPort, int startingPortNumber,
                       int endingPortNumber );

/**
 * Configures the settings for the @c serialComPort.
 *
 * @param serialComPort An opened SerialComPort object.
 * @param baudRate      One of the BAUDRATE_ constants defined above.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if an error occurred fetching current serial COM settings.
 * @return -3 if an error occurred setting new serial COM settings.
 * @return -4 if @c baudRate is not a valid BAUDRATE_ constant.
 * @return 0 on success.
 */
int
SERIALCOM_configurePort( SerialComPort *serialComPort, int baudRate );

/**
 * @param serialComPort An opened SerialComPort object.
 * Wparam buffer        Bytes read from the @c serialComPort are stored
 *                      in this buffer.
 * @param bufferSize    The size of the @c buffer, which will be the
 *                      maximum number of characters that will be read
 *                      from the @c serialComPort.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if @c buffer is NULL.
 * @return -3 if an error occurred reading from the serial COM port.
 *
 * @return The number of bytes successfully read.
 */
int
SERIALCOM_read( SerialComPort *serialComPort, char *buffer, int bufferSize );

/**
 * @param serialComPort An opened SerialComPort object.
 * @param buffer        A buffer containing the bytes to be written out to
 *                      the @c serialComPort.
 * @param bufferSize    The number of bytes to be written out from @c buffer.
 *
 * @return -1 if @c serialComPort is NULL.
 * @return -2 if @c buffer is NULL.
 * @return -3 if an error occurred writing to the serial COM port.
 *
 * @return The number of bytes successfully written.
 */
int
SERIALCOM_write( SerialComPort *serialComPort, char *buffer, int bufferSize );

/**
 * Clear any existing contents of the port's read/write buffers.
 */
int
SERIALCOM_purge( SerialComPort *serialComPort );

/**
 * @param serialComPort An opened SerialComPort object.
 *
 * @return 0 on success.
 */
int
SERIALCOM_destroySerialComPort( SerialComPort *serialComPort );

/**
 * Free the @c serialComPort object.
 */
#define \
SERIALCOM_freeSerialComPort( serialComPort ) \
    SERIALCOM_destroySerialComPort( serialComPort ); \
    if( serialComPort ) { free(serialComPort); serialComPort = NULL; };

#if defined(__cplusplus)
}  /* extern "C" */
#endif

#endif /* SERIALCOMPORT_H_ */
